/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.personalizer.implementation;

import com.microsoft.personalizer.models.RankRequest;
import com.microsoft.personalizer.PersonalizationClient;
import com.microsoft.rest.ServiceClient;
import com.microsoft.rest.RestClient;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import com.microsoft.personalizer.models.ContainerStatus;
import com.microsoft.personalizer.models.RankResponse;
import com.microsoft.personalizer.models.RewardRequest;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the PersonalizationClient class.
 */
public class PersonalizationClientImpl extends ServiceClient implements PersonalizationClient {
    /**
     * The Retrofit service to perform REST calls.
     */
    private PersonalizationClientService service;

    /**
     * Initializes an instance of PersonalizationClient client.
     */
    public PersonalizationClientImpl() {
        this("https://");
    }

    /**
     * Initializes an instance of PersonalizationClient client.
     *
     * @param baseUrl the base URL of the host
     */
    public PersonalizationClientImpl(String baseUrl) {
        super(baseUrl);
        initialize();
    }

    /**
     * Initializes an instance of PersonalizationClient client.
     *
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public PersonalizationClientImpl(OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        this("https://", clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of PersonalizationClient client.
     *
     * @param baseUrl the base URL of the host
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public PersonalizationClientImpl(String baseUrl, OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        super(baseUrl, clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of PersonalizationClient client.
     *
     * @param restClient the REST client containing pre-configured settings
     */
    public PersonalizationClientImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    private void initialize() {
        initializeService();
    }

    private void initializeService() {
        service = retrofit().create(PersonalizationClientService.class);
    }

    /**
     * The interface defining all the services for PersonalizationClient to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PersonalizationClientService {
        @Headers({ "Content-Type: application/json-patch+json; charset=utf-8", "x-ms-logging-context: .PersonalizationClient reward" })
        @POST("personalization/v1.0/events/{eventId}/reward")
        Observable<Response<ResponseBody>> reward(@Path("eventId") String eventId, @Body RewardRequest reward);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .PersonalizationClient activate" })
        @POST("personalization/v1.0/events/{eventId}/activate")
        Observable<Response<ResponseBody>> activate(@Path("eventId") String eventId);

        @Headers({ "Content-Type: application/json-patch+json; charset=utf-8", "x-ms-logging-context: .PersonalizationClient rank" })
        @POST("personalization/v1.0/rank")
        Observable<Response<ResponseBody>> rank(@Body RankRequest personalizationRequest);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .PersonalizationClient statusGet" })
        @GET("status")
        Observable<Response<ResponseBody>> statusGet();

    }

    /**
     * Report reward to allocate to the top ranked action for the specified event.
     *
     * @param eventId The event id this reward applies to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void reward(String eventId) {
        rewardWithServiceResponseAsync(eventId).toBlocking().single().body();
    }

    /**
     * Report reward to allocate to the top ranked action for the specified event.
     *
     * @param eventId The event id this reward applies to.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> rewardAsync(String eventId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(rewardWithServiceResponseAsync(eventId), serviceCallback);
    }

    /**
     * Report reward to allocate to the top ranked action for the specified event.
     *
     * @param eventId The event id this reward applies to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> rewardAsync(String eventId) {
        return rewardWithServiceResponseAsync(eventId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Report reward to allocate to the top ranked action for the specified event.
     *
     * @param eventId The event id this reward applies to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> rewardWithServiceResponseAsync(String eventId) {
        if (eventId == null) {
            throw new IllegalArgumentException("Parameter eventId is required and cannot be null.");
        }
        final RewardRequest reward = null;
        return service.reward(eventId, reward)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = rewardDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Report reward to allocate to the top ranked action for the specified event.
     *
     * @param eventId The event id this reward applies to.
     * @param reward The reward should be a floating point number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void reward(String eventId, RewardRequest reward) {
        rewardWithServiceResponseAsync(eventId, reward).toBlocking().single().body();
    }

    /**
     * Report reward to allocate to the top ranked action for the specified event.
     *
     * @param eventId The event id this reward applies to.
     * @param reward The reward should be a floating point number.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> rewardAsync(String eventId, RewardRequest reward, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(rewardWithServiceResponseAsync(eventId, reward), serviceCallback);
    }

    /**
     * Report reward to allocate to the top ranked action for the specified event.
     *
     * @param eventId The event id this reward applies to.
     * @param reward The reward should be a floating point number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> rewardAsync(String eventId, RewardRequest reward) {
        return rewardWithServiceResponseAsync(eventId, reward).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Report reward to allocate to the top ranked action for the specified event.
     *
     * @param eventId The event id this reward applies to.
     * @param reward The reward should be a floating point number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> rewardWithServiceResponseAsync(String eventId, RewardRequest reward) {
        if (eventId == null) {
            throw new IllegalArgumentException("Parameter eventId is required and cannot be null.");
        }
        Validator.validate(reward);
        return service.reward(eventId, reward)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = rewardDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> rewardDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Report that the specified event was actually displayed to the user and a reward should be expected for it.
     *
     * @param eventId The event id this activation applies to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void activate(String eventId) {
        activateWithServiceResponseAsync(eventId).toBlocking().single().body();
    }

    /**
     * Report that the specified event was actually displayed to the user and a reward should be expected for it.
     *
     * @param eventId The event id this activation applies to.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> activateAsync(String eventId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(activateWithServiceResponseAsync(eventId), serviceCallback);
    }

    /**
     * Report that the specified event was actually displayed to the user and a reward should be expected for it.
     *
     * @param eventId The event id this activation applies to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> activateAsync(String eventId) {
        return activateWithServiceResponseAsync(eventId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Report that the specified event was actually displayed to the user and a reward should be expected for it.
     *
     * @param eventId The event id this activation applies to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> activateWithServiceResponseAsync(String eventId) {
        if (eventId == null) {
            throw new IllegalArgumentException("Parameter eventId is required and cannot be null.");
        }
        return service.activate(eventId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = activateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> activateDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * A personalization rank request.
     *
     * @param personalizationRequest A personalization request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RankResponse object if successful.
     */
    public RankResponse rank(RankRequest personalizationRequest) {
        return rankWithServiceResponseAsync(personalizationRequest).toBlocking().single().body();
    }

    /**
     * A personalization rank request.
     *
     * @param personalizationRequest A personalization request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RankResponse> rankAsync(RankRequest personalizationRequest, final ServiceCallback<RankResponse> serviceCallback) {
        return ServiceFuture.fromResponse(rankWithServiceResponseAsync(personalizationRequest), serviceCallback);
    }

    /**
     * A personalization rank request.
     *
     * @param personalizationRequest A personalization request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RankResponse object
     */
    public Observable<RankResponse> rankAsync(RankRequest personalizationRequest) {
        return rankWithServiceResponseAsync(personalizationRequest).map(new Func1<ServiceResponse<RankResponse>, RankResponse>() {
            @Override
            public RankResponse call(ServiceResponse<RankResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * A personalization rank request.
     *
     * @param personalizationRequest A personalization request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RankResponse object
     */
    public Observable<ServiceResponse<RankResponse>> rankWithServiceResponseAsync(RankRequest personalizationRequest) {
        if (personalizationRequest == null) {
            throw new IllegalArgumentException("Parameter personalizationRequest is required and cannot be null.");
        }
        Validator.validate(personalizationRequest);
        return service.rank(personalizationRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RankResponse>>>() {
                @Override
                public Observable<ServiceResponse<RankResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RankResponse> clientResponse = rankDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RankResponse> rankDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<RankResponse, RestException>newInstance(this.serializerAdapter())
                .register(201, new TypeToken<RankResponse>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ContainerStatus object if successful.
     */
    public ContainerStatus statusGet() {
        return statusGetWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ContainerStatus> statusGetAsync(final ServiceCallback<ContainerStatus> serviceCallback) {
        return ServiceFuture.fromResponse(statusGetWithServiceResponseAsync(), serviceCallback);
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContainerStatus object
     */
    public Observable<ContainerStatus> statusGetAsync() {
        return statusGetWithServiceResponseAsync().map(new Func1<ServiceResponse<ContainerStatus>, ContainerStatus>() {
            @Override
            public ContainerStatus call(ServiceResponse<ContainerStatus> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ContainerStatus object
     */
    public Observable<ServiceResponse<ContainerStatus>> statusGetWithServiceResponseAsync() {
        return service.statusGet()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ContainerStatus>>>() {
                @Override
                public Observable<ServiceResponse<ContainerStatus>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ContainerStatus> clientResponse = statusGetDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ContainerStatus> statusGetDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<ContainerStatus, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ContainerStatus>() { }.getType())
                .build(response);
    }

}
